from .abstract import AbstractModel

class Criteria (AbstractModel):
    TABLE = {"table":"Criteria", "id_field":"id"}
    TYPE_ENUM = {
        0: 'KILL_CREATURE',
        1: 'WIN_BG',
        5: 'REACH_LEVEL',
        7: 'REACH_SKILL_LEVEL',
        8: 'COMPLETE_ACHIEVEMENT',
        9: 'COMPLETE_QUEST_COUNT',
        10: 'COMPLETE_DAILY_QUEST_DAILY',
        11: 'COMPLETE_QUESTS_IN_ZONE',
        13: 'DAMAGE_DONE',
        14: 'COMPLETE_DAILY_QUEST',
        15: 'COMPLETE_BATTLEGROUND',
        16: 'DEATH_AT_MAP',
        18: 'DEATH_IN_DUNGEON',
        19: 'COMPLETE_RAID',
        20: 'KILLED_BY_CREATURE',
        24: 'FALL_WITHOUT_DYING',
        26: 'DEATHS_FROM',
        27: 'COMPLETE_QUEST',
        28: 'BE_SPELL_TARGET',
        29: 'CAST_SPELL',
        30: 'BG_OBJECTIVE_CAPTURE',
        31: 'HONORABLE_KILL_AT_AREA',
        32: 'WIN_ARENA',
        33: 'PLAY_ARENA',
        34: 'LEARN_SPELL',
        36: 'OWN_ITEM',
        37: 'WIN_RATED_ARENA',
        38: 'HIGHEST_TEAM_RATING',
        39: 'REACH_TEAM_RATING',
        40: 'LEARN_SKILL_LEVEL',
        41: 'USE_ITEM',
        42: 'LOOT_ITEM',
        43: 'EXPLORE_AREA',
        44: 'OWN_RANK',
        45: 'BUY_BANK_SLOT',
        46: 'GAIN_REPUTATION',
        47: 'GAIN_EXALTED_REPUTATION',
        48: 'VISIT_BARBER_SHOP',
        49: 'EQUIP_EPIC_ITEM',
        50: 'ROLL_NEED_ON_LOOT',
        51: 'ROLL_GREED_ON_LOOT',
        52: 'HK_CLASS',
        53: 'HK_RACE',
        54: 'DO_EMOTE',
        55: 'HEALING_DONE',
        56: 'GET_KILLING_BLOWS',
        57: 'EQUIP_ITEM',
        62: 'MONEY_FROM_QUEST_REWARD',
        67: 'LOOT_MONEY',
        68: 'USE_GAMEOBJECT',
        69: 'BE_SPELL_TARGET2',
        70: 'SPECIAL_PVP_KILL',
        72: 'FISH_IN_GAMEOBJECT',
        75: 'LEARN_SKILLLINE_SPELLS',
        76: 'WIN_DUEL',
        96: 'HIGHEST_POWER',
        97: 'HIGHEST_STAT',
        98: 'HIGHEST_SPELLPOWER',
        100: 'HIGHEST_RATING',
        109: 'LOOT_TYPE',
        110: 'CAST_SPELL2',
        112: 'LEARN_SKILL_LINE',
        113: 'EARN_HONORABLE_KILL',
        114: 'ACCEPTED_SUMMONS',
        115: 'ACHIVEMENTPOINTS_REACHED',
        119: 'RANDOM_DUNGEON_PLAYERCOUNT'
    }
    def __init__ (self, id, **kwargs):
        super (Criteria, self).__init__(id, **kwargs)
        
class CriteriaTree (AbstractModel):
    TABLE = {"table":"CriteriaTree", "id_field":"id", "id_parent_field":"Parent"}
    def __init__ (self, id, **kwargs):
        super (CriteriaTree, self).__init__(id, **kwargs)
